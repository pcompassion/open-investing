#+title: Pivot_table


#+PROPERTY: header-args:jupyter-python tangle test.py


#+begin_src jupyter-python
display_width = 220

import pandas as pd
pd.set_option('display.width', display_width)

import numpy as np
np.set_printoptions(linewidth=display_width)
#+end_src

#+RESULTS:



#+begin_src jupyter-python
import pandas as pd

data = {
    'Date': ['2023-10-01', '2023-10-01', '2023-10-02', '2023-10-02', '2023-10-03'],
    'Product': ['A', 'B', 'A', 'A', 'B'],
    'Sales': [100, 150, 200, 50, 300],
}

data2 = {
    'Date': ['2023-10-01', '2023-10-01', '2023-10-02', '2023-10-02', '2023-10-03'],
    'Product': ['A', 'B', 'A', 'A', 'B'],
    'Sales': [100, 150, 200, 50, 300],
    'Cost': [10, 15, 20, 5, 30]
}

df = pd.DataFrame(data)
df2 = pd.DataFrame(data2)
print(df)

#+end_src

#+RESULTS:
:          Date Product  Sales
: 0  2023-10-01       A    100
: 1  2023-10-01       B    150
: 2  2023-10-02       A    200
: 3  2023-10-02       A     50
: 4  2023-10-03       B    300

#+begin_src jupyter-python
pivot_df = df.pivot_table(values='Sales', index='Date', columns='Product', aggfunc='sum', fill_value=0)
print(pivot_df)
# group by index, and columns, for each group, aggregate values column data
# df.groupby(["index", "columns"]).sum("Sales")
#+end_src

#+RESULTS:
: Product       A    B
: Date
: 2023-10-01  100  150
: 2023-10-02  250    0
: 2023-10-03    0  300


#+begin_src jupyter-python
grouped = df.groupby(['Date', 'Product']).sum().unstack('Product', fill_value=0)
print(grouped)

#+end_src

#+RESULTS:
:            Sales
: Product        A    B
: Date
: 2023-10-01   100  150
: 2023-10-02   250    0
: 2023-10-03     0  300


#+begin_src jupyter-python
# internally make group (each group has unique value for the specified columns)
# and we still have access to all the rows
df.groupby(['Date', 'Product'])
# sum() doesn't say what to some, is it implicit here because Sales is only remaming column?
# the resulting dataframe has Date and Product as index
df_sum = df.groupby(['Date', 'Product']).sum()
print(df_sum)
# print(df_sum.index)

#+end_src

#+RESULTS:
:                     Sales
: Date       Product
: 2023-10-01 A          100
:            B          150
: 2023-10-02 A          250
: 2023-10-03 B          300



#+begin_src jupyter-python
df2
#+end_src

#+RESULTS:
:          Date Product  Sales  Cost
: 0  2023-10-01       A    100    10
: 1  2023-10-01       B    150    15
: 2  2023-10-02       A    200    20
: 3  2023-10-02       A     50     5
: 4  2023-10-03       B    300    30

#+begin_src jupyter-python
df2.groupby(['Date', 'Product'])
# sum() doesn't specify which column, so probably do sum on all numerical columns
# the resulting dataframe has Date and Product as index
df_sum2 = df2.groupby(['Date', 'Product']).sum()
print(df_sum2)

#+end_src

#+RESULTS:
:                     Sales  Cost
: Date       Product
: 2023-10-01 A          100    10
:            B          150    15
: 2023-10-02 A          250    25
: 2023-10-03 B          300    30

#+begin_src jupyter-python
grouped = df.groupby(['Date', 'Product']).sum().unstack('Product', fill_value=0)
print(grouped)

#+end_src

#+RESULTS:
:            Sales
: Product        A    B
: Date
: 2023-10-01   100  150
: 2023-10-02   250    0
: 2023-10-03     0  300


#+begin_src jupyter-python
grouped2 = df2.groupby(['Date', 'Product']).sum().unstack('Product', fill_value=0)
print(grouped2)

#+end_src

#+RESULTS:
:            Sales      Cost
: Product        A    B    A   B
: Date
: 2023-10-01   100  150   10  15
: 2023-10-02   250    0   25   0
: 2023-10-03     0  300    0  30

#+begin_src jupyter-python
grouped.columns = grouped.columns.droplevel()
print(grouped)
#+end_src

#+RESULTS:
: Product       A    B
: Date
: 2023-10-01  100  150
: 2023-10-02  250    0
: 2023-10-03    0  300


#+begin_src jupyter-python
grouped2.columns = grouped2.columns.droplevel()
print(grouped2)
#+end_src

#+RESULTS:
: Product       A    B   A   B
: Date
: 2023-10-01  100  150  10  15
: 2023-10-02  250    0  25   0
: 2023-10-03    0  300   0  30


#+begin_src jupyter-python
import pandas as pd

arrays = [
    ['A', 'A', 'B', 'B'],
    [1, 2, 1, 2]
]
index = pd.MultiIndex.from_arrays(arrays, names=('letters', 'numbers'))
data = [10, 20, 30, 40]
df = pd.DataFrame({'data': data}, index=index)

print(df)

#+end_src

#+RESULTS:
:                  data
: letters numbers
: A       1          10
:         2          20
: B       1          30
:         2          40


#+begin_src jupyter-python
df.columns
#+end_src

#+RESULTS:
: Index(['data'], dtype='object')


#+begin_src jupyter-python
df.index
#+end_src

#+RESULTS:
: MultiIndex([('A', 1),
:             ('A', 2),
:             ('B', 1),
:             ('B', 2)],
:            names=['letters', 'numbers'])

#+begin_src jupyter-python
df2= df.unstack()
df2
#+end_src

#+RESULTS:
:         data
: numbers    1   2
: letters
: A         10  20
: B         30  40

#+begin_src jupyter-python
df2.index
#+end_src

#+RESULTS:
: Index(['A', 'B'], dtype='object', name='letters')

#+begin_src jupyter-python
df2.columns
#+end_src

#+RESULTS:
: MultiIndex([('data', 1),
:             ('data', 2)],
:            names=[None, 'numbers'])

#+begin_src jupyter-python

# Sample data
gender = ['Male', 'Female', 'Male', 'Male', 'Female', 'Female']
drink = ['Tea', 'Coffee', 'Coffee', 'Tea', 'Tea', 'Coffee']

# Using crosstab to see the breakdown of gender by drink choice
table = pd.crosstab(gender, drink)
print(table)

#+end_src

#+RESULTS:
: col_0   Coffee  Tea
: row_0
: Female       2    1
: Male         1    2

#+begin_src jupyter-python
data = {
"gender": gender,
"drink": drink,
"count": [1] * len(gender)
}
df = pd.DataFrame(data)

df_res = df.groupby(["gender", "drink"]).sum()
df_res
#+end_src

#+RESULTS:
:                count
: gender drink
: Female Coffee      2
:        Tea         1
: Male   Coffee      1
:        Tea         2

#+begin_src jupyter-python
df_res.columns
#+end_src

#+RESULTS:
: Index(['count'], dtype='object')

#+begin_src jupyter-python
df_res = df_res.unstack()
df_res.columns = df_res.columns.droplevel()
df_res
#+end_src

#+begin_src jupyter-python
data = {
"gender": gender,
"drink": drink,
}
df = pd.DataFrame(data)

df_res = df.groupby(["gender", "drink"]).size()
# df_res.columns = df_res.columns.droplevel()
df_res

#+end_src

#+RESULTS:
: gender  drink
: Female  Coffee    2
:         Tea       1
: Male    Coffee    1
:         Tea       2
: dtype: int64



#+begin_src jupyter-python
type(df_res)
#+end_src

#+RESULTS:
: pandas.core.series.Series

#+begin_src jupyter-python
df_res = df_res.unstack(fill_value=0)
df_res
#+end_src

#+RESULTS:
: drink   Coffee  Tea
: gender
: Female       2    1
: Male         1    2

#+begin_src jupyter-python
print(type(df_res))
df_res.columns
#+end_src

#+RESULTS:
:RESULTS:
: <class 'pandas.core.frame.DataFrame'>
: Index(['Coffee', 'Tea'], dtype='object', name='drink')
:END:

#+begin_src jupyter-python
data = {
"gender": gender,
"drink": drink,
"count": [1] * len(gender)
}
df = pd.DataFrame(data)

df.pivot_table(values='count', index='gender', columns='drink', aggfunc='sum', fill_value=0)

#+end_src

#+RESULTS:
: drink   Coffee  Tea
: gender
: Female       2    1
: Male         1    2

#+begin_src jupyter-python
data = {
"gender": gender,
"drink": drink,
}
df = pd.DataFrame(data)

df.pivot_table(index='gender', columns='drink', aggfunc='size', fill_value=0)

#+end_src

#+RESULTS:
: drink   Coffee  Tea
: gender
: Female       2    1
: Male         1    2
